pub const DESERET_IPA_MAPPING: &[((char, char), &'static str)] = &[
    (('𐐀', '𐐨'), "iː"),
    (('𐐁', '𐐩'), "eɪ"),
    (('𐐂', '𐐪'), "ɑː"),
    (('𐐃', '𐐫'), "ɔː"),
    (('𐐄', '𐐬'), "oʊ"),
    (('𐐅', '𐐭'), "uː"),
    (('𐐆', '𐐮'), "ɪ"),
    (('𐐇', '𐐯'), "ɛ"),
    (('𐐈', '𐐰'), "æ"),
    (('𐐉', '𐐱'), "ɒ"),
    (('𐐊', '𐐲'), "ʌ"),
    (('𐐋', '𐐳'), "ʊ"),
    (('𐐌', '𐐴'), "aɪ"),
    (('𐐍', '𐐵'), "aʊ"),
    (('𐐎', '𐐶'), "w"),
    (('𐐏', '𐐷'), "j"),
    (('𐐐', '𐐸'), "h"),
    (('𐐑', '𐐹'), "p"),
    (('𐐒', '𐐺'), "b"),
    (('𐐓', '𐐻'), "t"),
    (('𐐔', '𐐼'), "d"),
    (('𐐕', '𐐽'), "tʃ"),
    (('𐐖', '𐐾'), "dʒ"),
    (('𐐗', '𐐿'), "k"),
    (('𐐘', '𐑀'), "ɡ"),
    (('𐐙', '𐑁'), "f"),
    (('𐐚', '𐑂'), "v"),
    (('𐐛', '𐑃'), "θ"),
    (('𐐜', '𐑄'), "ð"),
    (('𐐝', '𐑅'), "s"),
    (('𐐞', '𐑆'), "z"),
    (('𐐟', '𐑇'), "ʃ"),
    (('𐐠', '𐑈'), "ʒ"),
    (('𐐡', '𐑉'), "r"),
    (('𐐢', '𐑊'), "l"),
    (('𐐣', '𐑋'), "m"),
    (('𐐤', '𐑌'), "n"),
    (('𐐥', '𐑍'), "ŋ"),
    (('𐐦', '𐑎'), "ɔɪ"),
    (('𐐧', '𐑏'), "juː"),
];

pub fn lookup(deseret_char: char) -> Option<&'static str> {
    DESERET_IPA_MAPPING.iter().find_map(|((cap, lower), ipa)| {
        if deseret_char == *cap || deseret_char == *lower {
            Some(*ipa)
        } else {
            None
        }
    })
}

pub fn translate_iter(text: &str) -> impl Iterator<Item = &str> {
    text.char_indices().map(|(i, c)| {
        if let Some(ipa) = lookup(c) {
            ipa
        } else {
            &text[i..i + c.len_utf8()]
        }
    })
}
